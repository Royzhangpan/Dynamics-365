<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HSOGlobal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HSOGlobal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>captureInfoMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Capture the messgae of current infolog
    /// </summary>
    /// <param name = "_prefix"> add the messge prefix</param>
    /// <returns></returns>
    static str captureInfoMessage(boolean _prefix = false)
    {
        SysInfologEnumerator    sysInfologEnumerator;
        SysInfologMessageStruct infoMessageStruct;
        int                     prefixElement;
        str                     prefixText;
        str                     errorMessage;

        sysInfologEnumerator = SysInfologEnumerator::newData(infolog.infologData());

        while (sysInfologEnumerator.moveNext())
        {
            infoMessageStruct = SysInfologMessageStruct::construct(sysInfologEnumerator.currentMessage());

            if (_prefix)
            {
                prefixElement = 1;
                while (infoMessageStruct.prefixDepth() > prefixElement)
                {
                    prefixText += (infoMessageStruct.preFixTextElement(prefixElement) + '.');
                    prefixElement++;
                }
            }
            errorMessage += (prefixText + infoMessageStruct.message());
        }

        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFinancalDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public Static void createFinancalDimensionValue(str _dimensionName, str _dimensionValue)
    {    
        DimensionAttribute          dimAttr;
        DimensionAttributeValue     dimAttrValue;
        DimensionFinancialTag       dimFinTag;
        RecId                       dimFinancialCategoryRecid;
        try
        {
            dimAttr = DimensionAttribute::findByName(_DimensionName);
            dimFinancialCategoryRecid = dimAttr.financialTagCategory();
            dimFinTag = DimensionFinancialTag::findByFinancialTagCategoryAndValue(dimAttr.financialTagCategory(), _dimensionValue);
            if (!dimFinTag.RecId)
            {
                dimFinTag.clear();
                dimFinTag.Value                  = _DimensionValue;
                dimFinTag.Description            = _DimensionValue;
                dimFinTag.FinancialTagCategory   = dimFinancialCategoryRecid;
                dimFinTag.insert();
            }
        }
        catch (Exception::Error)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultDimension</Name>
				<Source><![CDATA[
    static DimensionDefault generateDefaultDimension(container _attr, container _value, boolean _createIfNotFound = true)
    {
        DimensionAttributeValueSetStorage valueSetStorage = new DimensionAttributeValueSetStorage();

        DimensionDefault result;

        int i;

        DimensionAttribute dimensionAttribute;

        DimensionAttributeValue dimensionAttributeValue;

        //_attr is dimension name in table DimensionAttribute

        container conAttr = _attr;

        container conValue = _value;

        str dimValue;

        for (i = 1; i <= conLen(conAttr); i++)
        {
            dimensionAttribute = dimensionAttribute::find(conPeek(conAttr,i));

            if (dimensionAttribute.RecId == 0)
            {
                continue;
            }

            dimValue = conPeek(conValue,i);

            if (dimValue != "")
            {
                // _createIfNotFound is "true". A dimensionAttributeValue record will be created if not found.
                dimensionAttributeValue = dimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,dimValue, false, _createIfNotFound);
				// Add the dimensionAttibuteValue to the default dimension
                valueSetStorage.addItem(dimensionAttributeValue);
            }
        }

        result = valueSetStorage.save();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static DimensionDefault updateDefaultDimensionValue(DimensionDefault _defaultDimension, str _dimensionName, str _dimensionValue, boolean _forUpdate = false, boolean _createIfNecessary = false)
    {
        DimensionAttributeValueSetStorage   dimStorage = new DimensionAttributeValueSetStorage();
        DimensionAttribute                  dimAttribute;
        DimensionAttributeValue             dimAttributeValue;
        DimensionDefault                    defaultDimension = _defaultDimension;

        dimStorage          = DimensionAttributeValueSetStorage::find(_defaultDimension);
        dimAttribute        = DimensionAttribute::findByName(_DimensionName);
        if (dimAttribute && _dimensionValue)
        {
            HSOGlobal::createFinancalDimensionValue(_dimensionName, _dimensionValue);
            dimAttributeValue   = DimensionAttributeValue::findByDimensionAttributeAndValue(dimAttribute, _dimensionValue, _forUpdate, _createIfNecessary);

            dimStorage.addItem(dimAttributeValue);
            // Dimension modified or updated including costcentre as well.
            defaultDimension = dimStorage.save();
		}
        
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captureClrError</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Capture the messgae of CLR exception
    /// </summary>
    /// <returns></returns>
    public static str captureClrError()
    {
        str errorMessage;

        System.Exception clrError = CLRInterop::getLastException();
        while (clrError != null)
        {
            errorMessage += clrError.Message;
            clrError = clrError.InnerException;
        }

        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compress</Name>
				<Source><![CDATA[
    /// <summary>
    /// GZip compress
    /// </summary>
    /// <param name = "_value"></param>
    /// <returns>压缩后的Base64编码的字符串</returns>
    public static str compress(str _value)
    {
        System.Byte[] byte = System.Text.Encoding::UTF8.GetBytes(_value);
        System.IO.MemoryStream ms = new System.IO.MemoryStream();
        System.IO.Compression.GZipStream compressedzipStream = new System.IO.Compression.GZipStream(ms, System.IO.Compression.CompressionMode::Compress, true);
        compressedzipStream.Write(byte, 0, byte.get_Length());
        compressedzipStream.Close();
        return System.Convert::ToBase64String(ms.ToArray());
    }

]]></Source>
			</Method>
			<Method>
				<Name>decompress</Name>
				<Source><![CDATA[
    /// <summary>
    /// GZip decompress
    /// </summary>
    /// <param name = "_value"></param>
    /// <returns></returns>
    public static str decompress(str _value)
    {
        System.Byte[] byte = System.Convert::FromBase64String(_value);
        System.IO.MemoryStream ms = new System.IO.MemoryStream(byte);
        System.IO.Compression.GZipStream compressedzipStream = new System.IO.Compression.GZipStream(ms, System.IO.Compression.CompressionMode::Decompress, true);
        System.IO.MemoryStream outBuffer = new System.IO.MemoryStream();
        System.Byte[] block = new System.Byte[1024]();

        while (true)
        {
            int bytesRead = compressedzipStream.Read(block, 0, block.Length);
            if (bytesRead <= 0)
            {
                break;
            }
            else
            {
                outBuffer.Write(block, 0, bytesRead);
            }
        }
        compressedzipStream.Close();
        return System.Text.Encoding::UTF8.GetString(outBuffer.ToArray());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueByDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static String255 getDimensionValueByDefaultDimension(DimensionDefault _defaultDimension, str _dimensionName)
    {
        String255               dimensionvalue;
        DefaultDimensionView    defaultDimensionView;

        select firstonly defaultDimensionView
            where  defaultDimensionView.Name            == _dimensionName
            && defaultDimensionView.DefaultDimension    == _defaultDimension;
        if (defaultDimensionView)
        {
            dimensionvalue = defaultDimensionView.DisplayValue;
        }
        return dimensionvalue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDefaultDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static DimensionDefault removeDefaultDimensionValue(DimensionDefault _defaultDimension, str _dimensionName)
    {
        DimensionAttributeValueSetStorage   dimStorage = new DimensionAttributeValueSetStorage();
        DimensionAttribute                  dimAttribute;
        DimensionAttributeValue             dimAttributeValue;
        DimensionDefault                    defaultDimension;
    
        dimStorage          = DimensionAttributeValueSetStorage::find(_defaultDimension);
        dimAttribute        = DimensionAttribute::findByName(_DimensionName);
        dimStorage.removeDimensionAttribute(dimAttribute.RecId);
        defaultDimension = dimStorage.save();
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkerByADAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find HcmWorker by AD account
    /// </summary>
    /// <param name = "_account">AD account</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <param name = "_concurrencyModel">The concurrency model option to use when it reads the record; optional.</param>
    /// <returns>The specified record in the <c>HcmWorker</c> table if found.</returns>
    public static HcmWorker findWorkerByADAccount(HSOADAccount _account, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmWorker hcmWorker;

        hcmWorker.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmWorker.concurrencyModel(_concurrencyModel);
        }

        if (_account)
        {
            select firstonly hcmWorker
            where hcmWorker.HSOADAccount == _account;
        }

        return hcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimensionWithALSIS</Name>
				<Source><![CDATA[
    public static container updateDefaultDimensionWithALSIS(DimensionDefault _defaultDimension, boolean _showError = true)
    {
        RecId defaultDimension = _defaultDimension;
        HSOLedgerParameters ledgerParameters = HSOLedgerParameters::find();
        DimensionAttributeValueSetStorage dimensionAttributeValueSetStorage = dimensionAttributeValueSetStorage::find(_defaultDimension);

        DimensionValue scope =  dimensionAttributeValueSetStorage.getDisplayValueByDimensionAttribute(dimensionAttribute::findByName(ScaConstDimensions::scope).RecId);
        DimensionValue costCenter = dimensionAttributeValueSetStorage.getDisplayValueByDimensionAttribute(dimensionAttribute::findByName(ScaConstDimensions::CostCenter).RecId);
        DimensionValue channel =dimensionAttributeValueSetStorage.getDisplayValueByDimensionAttribute(dimensionAttribute::findByName(ScaConstDimensions::Channel).RecId);
        DimensionValue product = dimensionAttributeValueSetStorage.getDisplayValueByDimensionAttribute(dimensionAttribute::findByName(ScaConstDimensions::Product).RecId);
        DimensionValue application = dimensionAttributeValueSetStorage.getDisplayValueByDimensionAttribute(dimensionAttribute::findByName(ScaConstDimensions::application).RecId);
        DimensionValue oldProductUnit = dimensionAttributeValueSetStorage.getDisplayValueByDimensionAttribute(dimensionAttribute::findByName(ScaConstDimensions::ProductUnit).RecId);
        DimensionValue newProductUnit = SCAALSISTranslationTable::find(application, channel, product, scope).ProductUnit;
        if (ledgerParameters.GL02ErrorProductUnit && newProductUnit == ledgerParameters.GL02ErrorProductUnit && _showError)
        {
            warning(strFmt("@HSO:ErrorProductUnit", newProductUnit));
            return [oldProductUnit, newProductUnit, _defaultDimension];
        }

        DimensionAttribute dimAttribute = DimensionAttribute::findByName(ScaConstDimensions::Scope);
        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValueNoError(dimAttribute, scope);
        DimensionExt scopeGroupDimension = dimensionAttributeValue.GroupDimension;
        //DimensionValue newBusinessUnit = HSOALSISCostCenterBusinessUnit::findBU(productUnit, groupDimension, costCenter);
            
        if (newProductUnit && newProductUnit != oldProductUnit)
        {
            HSOALSISCostCenterBusinessUnit  ALSISCostCenterBusinessUnit;

            select count(RecId) from ALSISCostCenterBusinessUnit
            where ALSISCostCenterBusinessUnit.RiginPU == newProductUnit
            && ALSISCostCenterBusinessUnit.GroupDimension == scopeGroupDimension
            && ALSISCostCenterBusinessUnit.CostCenter != '';

            defaultDimension = HSOGlobal::updateDefaultDimensionValue(_defaultDimension, ScaConstDimensions::ProductUnit, newProductUnit);;
            if (ALSISCostCenterBusinessUnit.RecId == 1)
            {
                select firstonly CostCenter from ALSISCostCenterBusinessUnit
                    where ALSISCostCenterBusinessUnit.RiginPU == newProductUnit
                    && ALSISCostCenterBusinessUnit.GroupDimension == scopeGroupDimension;
                defaultDimension =  HSOGlobal::updateDefaultDimensionValue(defaultDimension, ScaConstDimensions::CostCenter, ALSISCostCenterBusinessUnit.CostCenter);
            }
        }

        return [oldProductUnit, newProductUnit, application, channel, product, scope, defaultDimension];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static LanguageId getUserLanguage()
    {
        return XUserInfo::find(false, curUserId()).language;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>